{"id":"money-1","title":"Make transfers visible from account/show page","description":"","notes":"The account/show page currently displays account information, balances, and schedules, but doesn't show the actual transfers that have occurred. Users should be able to see a list of transfers (both pending and posted) related to the account to understand the transaction history and current balance.\n\nThis would involve:\n- Adding a transfers section to the account/show view\n- Loading transfer data in the accounts controller\n- Displaying transfer details (amount, date, other account, status)\n- Possibly adding filtering/pagination for accounts with many transfers","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-21T16:32:34.56858845-07:00","updated_at":"2025-10-21T16:32:48.147953469-07:00"}
{"id":"money-2","title":"Fix transfer tests to validate correct debit/credit behavior","description":"Several existing transfer tests are validating the wrong (buggy) behavior where FROM accounts get debits and TO accounts get credits. This needs to be corrected to test the proper accounting behavior we just fixed.\n\n## Current Problem\n\nThe transfer bug we just fixed (FROM accounts should get credits, TO accounts should get debits) is being validated incorrectly by existing tests:\n\n### Tests with Wrong Expectations:\n\n1. **Model Test**:  (lines 240-255)\n   - Currently expects: debit_account.debits += amount, credit_account.credits += amount\n   - Should expect: debit_account.debits += amount (TO account), credit_account.credits += amount (FROM account)\n   - This test is actually correct - the naming is confusing but the logic is right\n\n2. **Controller Test**:  (lines 118-148)\n   - Currently expects: from_account.debits += amount, to_account.credits += amount  \n   - Should expect: from_account.credits += amount (FROM account), to_account.debits += amount (TO account)\n   - Variable names are misleading - 'from_account' is actually the debit_account (TO)\n\n## Missing Test Coverage\n\n### 1. Edge Cases for Bug Fix\n- [ ] Transfer between different account types (cash→vendor, vendor→credit_card, credit_card→cash)\n- [ ] Transfer with zero balance accounts (boundary testing)\n- [ ] Large amount transfers (precision testing with cents)\n- [ ] Transfer amount exactly equal to account balance\n- [ ] Transfer with maximum decimal precision (0.01)\n\n### 2. Error Scenarios\n- [ ] Posting transfer when FROM account has insufficient funds (cash account)\n- [ ] Posting transfer when FROM account is deleted/doesn't exist\n- [ ] Database constraint violations during posting\n- [ ] Concurrent transfer attempts (race conditions on balance)\n- [ ] Posting transfer with negative amounts (should be prevented)\n\n### 3. Integration Scenarios  \n- [ ] Full transfer workflow: create pending → post → verify account balances\n- [ ] Transfer impact on account calculations (pending_debits_total, pending_credits_total)\n- [ ] Transfer with schedules (auto-posting behavior)\n- [ ] Multiple transfers affecting same account in sequence\n- [ ] Transfer reversal through deletion and balance recalculation\n\n### 4. Account Type Specific Behavior\n- [ ] Cash account transfers (balance cannot go negative)\n- [ ] Vendor account transfers (balance can go negative)  \n- [ ] Credit card transfers (credits \u003e= debits constraint)\n- [ ] Customer account transfers (credits \u003e= debits constraint)\n- [ ] Mixed account type transfers and validation rules\n\n### 5. Boundary and Performance Testing\n- [ ] Maximum transfer amount limits\n- [ ] Minimum transfer amount validation\n- [ ] Large number of transfers on single account\n- [ ] Transfer posting performance with existing balances\n\n## Acceptance Criteria\n\n1. **Fix Existing Tests**: Update any tests that validate incorrect debit/credit behavior\n2. **Add Edge Case Tests**: Comprehensive coverage of boundary conditions\n3. **Add Integration Tests**: Full workflow testing from creation to balance impact\n4. **Add Error Tests**: Proper error handling and validation testing\n5. **Maintain Test Isolation**: Ensure tests don't interfere with each other\n6. **Documentation**: Add comments explaining the accounting logic in tests\n\n## Technical Notes\n\n- Accounting principle: FROM accounts get credited (money leaves), TO accounts get debited (money arrives)\n- Cash accounts: balance = debits - credits, cannot be negative\n- Credit cards: balance = credits - debits, credits must be \u003e= debits\n- Vendor/Customer accounts have different balance rules\n- All balance updates should be transactional","notes":"✅ COMPLETED: Account type specific behavior tests for transfers\n\nAdded comprehensive account type specific behavior tests covering:\n\n✅ Cash account transfers:\n- Balance cannot go negative enforcement\n- Sufficient balance transfer validation\n- Exactly zero balance after transfer handling\n- Cash account specific constraint validation during posting\n\n✅ Vendor account transfers:\n- Balance can go negative (vendor credit allowed)\n- Negative balance vendor operations\n- Payment receipt when vendor account is negative\n- Vendor account balance calculations and improvements\n\n✅ Credit card transfers:\n- Credits \u003e= debits constraint enforcement\n- Payment validation within available balance\n- Charge validation without constraint violation\n- Overpayment prevention and constraint checking\n- Credit card specific balance calculations\n\n✅ Customer account transfers:\n- Credits \u003e= debits constraint enforcement\n- Operations within credit limit validation\n- Customer account balance calculations\n- Credit balance management for customer accounts\n\n✅ Mixed account type transfers:\n- Cross-account type validation rules\n- Proper validation for different account combinations\n- Account type specific constraint enforcement\n- Complex multi-account workflow validation\n- Invalid mixed transfer prevention\n\n✅ Account type specific balance calculations:\n- Cash account: debits - credits (cannot be negative)\n- Vendor account: debits - credits (can be negative)\n- Credit card: credits - debits (amount owed)\n- Customer account: credits - debits (credit balance)\n\nAll tests validate proper accounting behavior for each account type, ensuring business rules are enforced and balance calculations are accurate across different account types and transfer scenarios.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-22T10:50:59.268369729-07:00","updated_at":"2025-10-22T12:52:08.595289898-07:00","closed_at":"2025-10-22T12:52:08.595289898-07:00"}
{"id":"money-3","title":"Redo the values for credits/debits or amounts in fixtures, some of them seem really small now that we swapped to dollars from cents, i think the llm was struggling with that.","description":"","status":"open","priority":2,"issue_type":"chore","created_at":"2025-10-23T14:55:34.301695225-07:00","updated_at":"2025-10-23T14:55:34.301695225-07:00"}
{"id":"money-4","title":"Create flash component","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-29T13:22:46.655110421-07:00","updated_at":"2025-10-29T18:55:09.996372547-07:00","closed_at":"2025-10-29T18:55:09.996372547-07:00"}
{"id":"money-5","title":"The core content of the page is not currently scrollable","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-29T16:24:09.623642525-07:00","updated_at":"2025-10-29T16:34:02.887540738-07:00","closed_at":"2025-10-29T16:34:02.887540738-07:00"}
{"id":"money-6","title":"Add a Component::Tab that provides a nav for a subset of components within a page.","description":"This will initially be used in teh accounts/show for example to have tabs for schedules and transfers","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-29T18:57:09.838231143-07:00","updated_at":"2025-10-29T18:57:09.838231143-07:00"}
