# Name of your application. Used to uniquely configure containers.
service: money

# Name of the container image.
image: money-app

servers:
  web:
    - 35.165.189.33
  # job:
  #   hosts:
  #     - 35.165.189.33
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: money.bodcompany.com

registry:
  server: 920804837400.dkr.ecr.us-west-2.amazonaws.com
  username: AWS
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
  clear:
    SOLID_QUEUE_IN_PUMA: true

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    WEB_CONCURRENCY: 2

    # Log everything from Rails
    # RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  debug: app exec --interactive "bash"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

volumes:
  - /data/money/db:/rails/storage

asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64
  context: .
ssh:
  user: ubuntu
